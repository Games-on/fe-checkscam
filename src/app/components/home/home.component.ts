// src/app/home/home.component.ts
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { CheckScamService } from '../../services/check-scam.service';
import { CheckScamRequestDTO } from '../../dtos/check-scam-request.dto';
import { Router, RouterModule } from '@angular/router'; // ƒê·∫£m b·∫£o Router ƒë√£ import
import { HeaderComponent } from '../../components/header/header.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n
import { FooterComponent } from '../../components/footer/footer.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n
import { ChatBoxComponent } from '../../components/chat-box/chat-box.component'; // C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n theo c·∫•u tr√∫c file c·ªßa b·∫°n

// C·∫¨P NH·∫¨T L·∫†I INTERFACE N√ÄY ƒê·ªÇ KH·ªöP CH√çNH X√ÅC V·ªöI JSON T·ª™ BACKEND C·ª¶A B·∫†N (nh∆∞ ·∫£nh network)
interface SearchApiResponse {
  info: string;
  type: number;
  description: string;
  reportDescription: string;
  moneyScam: string;
  dateReport: string | null;
  verifiedCount: number;
  lastReportAt: string;
  evidenceURLs: string[]; // <-- Ch√∫ √Ω ch·ªØ hoa 'URLs'
  analysis: string; // ƒê√¢y l√† tr∆∞·ªùng 'analysis' t·ª´ backend
  // B·ªè c√°c tr∆∞·ªùng `code`, `message`, `data` v√¨ ch√∫ng kh√¥ng c√≥ ·ªü c·∫•p root c·ªßa response API c·ªßa b·∫°n
  // code?: number;
  // message?: string;
  // data?: any;
}

interface Message {
  sender: 'user' | 'bot';
  text: string;
  isUser: boolean;
}

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    HeaderComponent,
    FooterComponent,
    ChatBoxComponent
  ],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss'
})
export class HomeComponent implements OnInit {

  info: string = '';
  selectedType: number = 1;
  currentSearchIcon: string = 'fas fa-mobile-alt';
  
  // searchResult: SearchApiResponse | null = null; // D√≤ng n√†y ph·∫£i ƒë∆∞·ª£c comment ho·∫∑c x√≥a
  isLoading: boolean = false;
  errorMessage: string | null = null;

  messages: Message[] = [];
  showChatbox: boolean = false;

  // D·ªØ li·ªáu m·ªõi cho b·∫£ng ranking
  phoneNumbers = [
    { phone: '0123456789', count: 15420, status: 'danger', description: 'L·ª´a ƒë·∫£o vay ti·ªÅn online' },
    { phone: '0987654321', count: 9850, status: 'danger', description: 'L·ª´a ƒë·∫£o b√°n h√†ng online' },
    { phone: '0345678901', count: 7890, status: 'safe', description: 'S·ªë ƒëi·ªán tho·∫°i ƒë∆∞·ª£c x√°c minh' },
    { phone: '0456789012', count: 6200, status: 'warning', description: 'Spam qu·∫£ng c√°o' },
    { phone: '0567890123', count: 5100, status: 'warning', description: 'Cu·ªôc g·ªçi nghi v·∫•n' },
    { phone: '0678901234', count: 4800, status: 'danger', description: 'L·ª´a ƒë·∫£o ƒë·∫ßu t∆∞ ch·ª©ng kho√°n' },
    { phone: '0789012345', count: 4200, status: 'warning', description: 'Qu·∫£ng c√°o l√†m th√™m' },
    { phone: '0890123456', count: 3950, status: 'danger', description: 'L·ª´a ƒë·∫£o b·∫£o hi·ªÉm' },
    { phone: '0901234567', count: 3600, status: 'safe', description: 'Hotline ch√≠nh th·ª©c' },
    { phone: '0912345678', count: 3200, status: 'warning', description: 'G·ªçi r·ªëi kh√¥ng n√≥i g√¨' }
  ];

  bankAccounts = [
    { account: '9876543210987', count: 11200, status: 'warning', description: 'T√†i kho·∫£n c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng' },
    { account: '1234567890123', count: 6950, status: 'danger', description: 'T√†i kho·∫£n l·ª´a ƒë·∫£o ƒë·∫ßu t∆∞' },
    { account: '5555666677778888', count: 5200, status: 'danger', description: 'T√†i kho·∫£n l·ª´a ƒë·∫£o TMDT' },
    { account: '1111222233334444', count: 4800, status: 'warning', description: 'Giao d·ªãch b·∫•t th∆∞·ªùng' },
    { account: '9999888877776666', count: 4200, status: 'safe', description: 'T√†i kho·∫£n ƒë∆∞·ª£c x√°c minh' },
    { account: '1357924680135', count: 3800, status: 'danger', description: 'L·ª´a ƒë·∫£o cho vay n·∫∑ng l√£i' },
    { account: '2468013579246', count: 3400, status: 'warning', description: 'T√†i kho·∫£n m·ªõi t·∫°o' },
    { account: '8642097531864', count: 3100, status: 'danger', description: 'L·ª´a ƒë·∫£o game' },
    { account: '7531908642753', count: 2850, status: 'safe', description: 'T√†i kho·∫£n doanh nghi·ªáp' },
    { account: '6420875319642', count: 2600, status: 'warning', description: 'Nh·∫≠n chuy·ªÉn kho·∫£n l·∫°' }
  ];

  websites = [
    { website: 'phishing-bank.vn', count: 12850, status: 'danger', description: 'Website gi·∫£ m·∫°o ng√¢n h√†ng' },
    { website: 'fake-ecommerce.com', count: 8750, status: 'danger', description: 'Shop online l·ª´a ƒë·∫£o' },
    { website: 'crypto-scam.net', count: 5800, status: 'danger', description: 'L·ª´a ƒë·∫£o ti·ªÅn ·∫£o' },
    { website: 'suspicious-loan.org', count: 4900, status: 'warning', description: 'Website vay ti·ªÅn nghi v·∫•n' },
    { website: 'verified-shop.vn', count: 3800, status: 'safe', description: 'Website ƒë∆∞·ª£c x√°c minh' },
    { website: 'fake-lottery.com', count: 3500, status: 'danger', description: 'L·ª´a ƒë·∫£o x·ªï s·ªë' },
    { website: 'scam-investment.biz', count: 3200, status: 'danger', description: 'L·ª´a ƒë·∫£o ƒë·∫ßu t∆∞ forex' },
    { website: 'fake-news-portal.info', count: 2900, status: 'warning', description: 'Website tin gi·∫£' },
    { website: 'trusted-store.vn', count: 2600, status: 'safe', description: 'C·ª≠a h√†ng uy t√≠n' },
    { website: 'phishing-social.net', count: 2300, status: 'danger', description: 'Gi·∫£ m·∫°o m·∫°ng x√£ h·ªôi' }
  ];

  // Tab management
  activeTab: string = 'phone';

searchResult: any;

  constructor(
    private checkScamService: CheckScamService,
    private router: Router // <-- ƒê·∫£m b·∫£o Router ƒë∆∞·ª£c inject
  ) { }

  ngOnInit(): void {
    this.updateSearchIcon();
  }

  onTypeChange(): void {
    this.updateSearchIcon();
    this.info = '';
    // this.searchResult = null; // Kh√¥ng c·∫ßn n·ªØa
    this.errorMessage = null;
  }

  updateSearchIcon(): void {
    switch (this.selectedType) {
      case 1:
        this.currentSearchIcon = 'fas fa-mobile-alt';
        break;
      case 2:
        this.currentSearchIcon = 'fas fa-university';
        break;
      case 3:
        this.currentSearchIcon = 'fas fa-globe';
        break;
      default:
        this.currentSearchIcon = 'fas fa-question-circle';
    }
  }

  sendMessage(): void {
    const value = this.info.trim();
    if (!value) {
      this.errorMessage = 'Vui l√≤ng nh·∫≠p th√¥ng tin c·∫ßn tra c·ª©u.';
      return;
    }

    this.errorMessage = null;
    this.isLoading = true;

    // C√°c validate ƒë·∫ßu v√†o (gi·ªØ nguy√™n)
    if (this.selectedType === 1 && !this.isPhoneNumber(value)) {
      this.errorMessage = 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† g·ªìm 10 ch·ªØ s·ªë.';
      this.isLoading = false;
      return;
    }
    if (this.selectedType === 2 && !this.isBankNumber(value)) {
      this.errorMessage = 'S·ªë t√†i kho·∫£n ch·ªâ ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± s·ªë.';
      this.isLoading = false;
      return;
    }
    if (this.selectedType === 3 && !this.isUrl(value)) {
      this.errorMessage = 'URL kh√¥ng h·ª£p l·ªá (v√≠ d·ª• h·ª£p l·ªá: https://example.com ho·∫∑c example.vn).';
      this.isLoading = false;
      return;
    }

    const requestBody: CheckScamRequestDTO = {
      info: value,
      type: this.selectedType
    };

    this.checkScamService.checkScam(requestBody).subscribe({
      next: (response) => {
        this.isLoading = false;
        console.log('API RESPONSE:', response);

        if (response && response.info) {
          console.log('API response successful. Navigating to /analyze.');
          this.router.navigate(['/analyze'], {
            state: {
              result: response,
              type: this.selectedType,
              info: value
            }
          });
        } else {
          this.errorMessage = 'C·∫•u tr√∫c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß kh√¥ng h·ª£p l·ªá.';
          console.error('Unexpected API response structure:', response);
        }
      },
      error: (error) => {
        this.isLoading = false;
        this.errorMessage = error?.error?.message || error?.message || 'ƒê√£ x·∫£y ra l·ªói khi tra c·ª©u.';
        console.error('API call failed:', error);
      }
    });
    this.info = '';
  }

  // ... (gi·ªØ nguy√™n c√°c h√†m validate v√† robot interaction)
  private isPhoneNumber(value: string): boolean {
    return /^0\d{9}$/.test(value.trim());
  }

  private isBankNumber(value: string): boolean {
    return /^\d+$/.test(value.trim());
  }

  private isUrl(value: string): boolean {
    const urlRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/i;
    return urlRegex.test(value.trim());
  }

  onAiTuVanClicked() {
    this.showChatbox = true;
  }

  closeChatbox() {
    this.showChatbox = false;
  }

  onRobotClick(): void {
    const actions = [
      () => this.showRobotMessage('ü§ñ Xin ch√†o! T√¥i l√† Robot CheckScam! Ch√¢n t√¥i c√≥ nhanh kh√¥ng?'),
      () => this.showRobotMessage('üõ°Ô∏è ƒêang tu·∫ßn tra b·∫£o v·ªá b·∫°n kh·ªèi l·ª´a ƒë·∫£o n√®!'),
      () => this.showRobotMessage('‚ö° T√¥i ch·∫°y quanh ƒë√¢y ƒë·ªÉ ki·ªÉm tra th√¥ng tin cho b·∫°n!'),
      () => this.showRobotMessage('üîç H√£y nh·∫≠p th√¥ng tin v√†o √¥ t√¨m ki·∫øm ƒë·ªÉ t√¥i gi√∫p b·∫°n!'),
      () => this.showRobotMessage('üèÉ‚Äç‚ôÇÔ∏è T√¥i c√≥ th·ªÉ ch·∫°y nhanh h∆°n! Xem ch√¢n t√¥i ƒë·∫°p th·∫ø n√†o!'),
      () => this.showRobotMessage('üöÄ B·∫°n mu·ªën xem t√¥i ch·∫°y TURBO kh√¥ng?'),
      () => this.showRobotMessage('ü§ñ Ch√¢n robot c·ªßa t√¥i ho·∫°t ƒë·ªông b·∫±ng AI ti√™n ti·∫øn!'),
      () => this.showRobotMessage('üëÅÔ∏è T√¥i ch·ªõp m·∫Øt ƒë·ªÉ gi·ªØ cho b·∫°n th·∫•y cute!'),
      () => this.speedUpRobot()
    ];
    
    const randomAction = actions[Math.floor(Math.random() * actions.length)];
    randomAction();
  }

  private showRobotMessage(message: string): void {
    const messageElement = document.createElement('div');
    messageElement.innerHTML = message;
    messageElement.style.cssText = `
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: linear-gradient(45deg, #FF6B35, #FF8A65);
      color: white;
      padding: 15px 20px;
      border-radius: 20px;
      font-weight: 600;
      box-shadow: 0 8px 25px rgba(255, 107, 53, 0.4);
      z-index: 10000;
      animation: fadeInOut 3s ease-in-out;
      max-width: 300px;
      text-align: center;
    `;
    
    document.body.appendChild(messageElement);
    
    setTimeout(() => {
      if (messageElement.parentNode) {
        messageElement.parentNode.removeChild(messageElement);
      }
    }, 3000);
  }

  private speedUpRobot(): void {
    const robot = document.querySelector('.search-robot') as HTMLElement;
    if (robot) {
      robot.style.animationDuration = '3s';
      robot.classList.add('turbo');
      this.showRobotMessage('üöÄ TURBO MODE ACTIVATED! Ch√¢n robot ƒëang ch·∫°y si√™u nhanh!');
      
      setTimeout(() => {
        robot.style.animationDuration = '10s';
        robot.classList.remove('turbo');
      }, 5000);
    }
  }

  // Helper methods for top searched table
  getTypeIcon(type: string): string {
    switch (type) {
      case 'phone': return 'fas fa-mobile-alt';
      case 'bank': return 'fas fa-university';
      case 'url': return 'fas fa-globe';
      default: return 'fas fa-question-circle';
    }
  }

  getTypeName(type: string): string {
    switch (type) {
      case 'phone': return 'ƒêi·ªán tho·∫°i';
      case 'bank': return 'T√†i kho·∫£n';
      case 'url': return 'Website';
      default: return 'Kh√°c';
    }
  }

  getStatusIcon(status: string): string {
    switch (status) {
      case 'danger': return 'fas fa-exclamation-triangle';
      case 'warning': return 'fas fa-exclamation-circle';
      case 'safe': return 'fas fa-check-circle';
      default: return 'fas fa-question-circle';
    }
  }

  getStatusText(status: string): string {
    switch (status) {
      case 'danger': return 'Nguy hi·ªÉm';
      case 'warning': return 'C·∫£nh b√°o';
      case 'safe': return 'An to√†n';
      default: return 'Ch∆∞a r√µ';
    }
  }

  // Tab management methods
  setActiveTab(tab: string): void {
    this.activeTab = tab;
  }

  // M·ªõi: Methods cho d·ªØ li·ªáu m·ªõi
  getPhoneNumbers(): any[] {
    return this.phoneNumbers;
  }

  getBankAccounts(): any[] {
    return this.bankAccounts;
  }

  getWebsites(): any[] {
    return this.websites;
  }
}